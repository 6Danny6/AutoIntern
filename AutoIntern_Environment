from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.chrome.options import Options
from app.application import Application


def browser_init(context):
    """
    :param context: Behave context
    """
    #context.driver = webdriver.Chrome(executable_path='./chromedriver.exe')
    context.driver = webdriver.Firefox(executable_path='./geckodriver.exe')

    context.driver.maximize_window()
    context.driver.implicitly_wait(4)
    context.driver.wait = WebDriverWait(context.driver, 10)
    context.app = Application(context.driver)

    #Headless
    options = webdriver.ChromeOptions()
    options.add_argument('headless')
    context.driver = webdriver.Chrome(chrome_options=options, executable_path='./chromedriver.exe')

    #Headless Firefox
    options = webdriver.FirefoxOptions()
    options.add_argument('headless')
    context.driver = webdriver.Firefox(options=options, executable_path='./geckodriver.exe')




def before_scenario(context, scenario):
    print('\nStarted scenario: ', scenario.name)
    browser_init(context)


def before_step(context, step):
    print('\nStarted step: ', step)


def after_step(context, step):
    if step.status == 'failed':
        logger.error(f'Step failed: {step}')
        print('\nStep failed: ', step)
        # Mark test case as FAILED on BrowserStack:
        # context.driver.execute_script(
        #     'browserstack_executor: {"action": "setSessionStatus", "arguments": {"status":"failed", "reason": "Step failed"}}')

def after_step(context, step):
    if step.status == 'failed':
        print('\nStep failed: ', step)


def after_scenario(context, feature):
    context.driver.delete_all_cookies()
    context.driver.quit()
